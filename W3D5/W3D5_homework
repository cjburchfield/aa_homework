## #Exercise 1 - Stack ###
## CJB note - LIFO // unfair ##

class Stack
    def initialize
      @stack_array = []
    end

    def stack_array
      @stack_array
    end

    def stack_array=(new_array) ## Not sure if this is needed?
      @stack_array = new_array
    end

    def push(ele)
      @stack_array.push(ele)
    end

    def pop
      @stack_array.pop
    end

    def peek
      @stack_array.last
    end
end

## #Exercise 2 - Queue ###
## CJB note - FIFO // fair ##

class Queue
  def initialize
    @stack_array = []
  end

  def stack_array
    @stack_array
  end

  def stack_array=(new_array) ## Not sure if this is needed?
    @stack_array = new_array
  end

  def enqueue(ele)
    @stack_array.push(ele)
  end

  def dequeue
    @stack_array.shift
  end

  def peek
    @stack_array.first
  end
end

class Map
  def initialize
    @stack_array = []
  end

  def stack_array
    @stack_array
  end

  def stack_array=(new_array) 
    @stack_array = new_array
  end

  # def hash
  #   hash = Hash.new { |h,k| h[k] = v }
  # end


  def set(key, value) #either create a new or update the value for a pre-existing key, check whether key exists
  end

  def get(key)
  end

  def delete(key)
  end

end


#Notes from video
#Map / Dictionary
#Need to set a key value pair, get a key, delete a key
#There needs to be just one value of that key, but it can be an array but just ONE array
