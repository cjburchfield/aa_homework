## #Exercise 1 - Stack ###

class Stack
    def initialize
      @stack_array = []
    end

    def push(el)
      @stack_array.push(el)
    end

    def pop
      @stack_array.pop
    end

    def peek
      @stack_array.last
    end
  end

#   To test that your code works, create a new instance of the Stack class, 
#   and play around with adding and removing elements. 
#   Remember, a stack follows the principle of LIFO!

  Exercise 2 - Queue
Now let's write a Queue class. We will need the following instance methods: enqueue(el), dequeue, and peek.

Test your code to ensure it follows the principle of FIFO.

Exercise 3 - Map
As you saw in the videos for tonight, a map can be implemented using a 2D array. 
Let's write a Map class (following a similar pattern to Stack and Queue) that implements a map using only arrays.

Remember, a map stores information in key-value pairs, where the keys are always unique. 
When implemented with arrays, a map might look something like this: my_map = [[k1, v1], [k2, v2], [k3, v2], ...].

Our Map class should have the following instance methods: set(key, value), get(key), 
delete(key), show. Note that the set method can be used to either create a new key-value pair
 or update the value for a pre-existing key. It's up to you to check whether a key currently exists!

As always, test your code thoroughly to make sure all properties of maps are enforced.

map // dictionary
set get delete

set a key value
get a key
delet a key

its jsut a set of key value pairs
one value of that key (it can be an array, but need s to be one wway)

stack lifo is last in first out which is unfair


data strucures
stacks support push and pop

quieie are fair - first in, firstout (enquie is push then unshift, fist out ois pop then pop)


then tree - binary